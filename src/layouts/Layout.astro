---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "Satvik Jonnalagadda's portfolio website showcasing skills, projects, and experience in software development and technology."
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
      rel="stylesheet"
    />
    <script is:inline>
      // Theme handling
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }
    </script>
  </head>
  <body class="bg-light-300 dark:bg-dark-300 text-dark-100 dark:text-light-200 transition-colors duration-300">
    <div class="flex flex-col min-h-screen">
      <Header />
      <main class="flex-grow">
        <slot />
      </main>
      <Footer />
    </div>

    <script>
      // Smooth scrolling for navigation links
      document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('a[href^="#"]');
        
        navLinks.forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
              const yOffset = -80; // Header height offset
              const y = targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset;
              
              window.scrollTo({
                top: y,
                behavior: 'smooth'
              });
              
              // Update URL without page reload
              history.pushState(null, null, targetId);
            }
          });
        });
      });
    </script>
  </body>
</html>